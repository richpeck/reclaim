- ########################################################
- ########################################################
- # Pages
- # Allows us to crate and submit claim forms (letter builder)
- # Depending on input params, we'll be able to show different content
- ########################################################
- ########################################################

- # Inner pages only
- if params[:id] && params[:id].to_sym != :index
  = content_tag :h1, translate("page.titles.#{params[:id]}").html_safe, class: :title # => Title
  = content_tag :div, translate("page.intros.#{params[:id]}").html_safe, class: :intro # => Intro

- ########################################################
- ########################################################

- # This Allows us to list the FAQ's and news as appropriate
- case params[:id].try(:to_sym)
  - when :faq, :news

    - # Shouldn't have this but removes confusion with .container
    .panels

      - # List
      - @content.each_with_index do |item,index|
        = content_tag :div, class: "panel" do

          - # FAQ
          - if params[:id].to_sym == :faq
            = radio_button_tag "panel", index
            = label_tag "panel_#{index}", item.ref

          - elsif params[:id].to_sym == :news
            = content_tag :h3, item.ref, class: "title"

          - # Content
          = content_tag :div, truncate(item.value, length: 350, separator: ' ',  omission: '…').html_safe, class: "content"

  - when :claims

    - ########################################################
    - ########################################################
    - # Claims
    - # Allows us to crate and submit claim forms (letter builder)
    - # This is meant to provide users with the ability to identify the various elements of the app
    - ########################################################
    - ########################################################

    // Form
    // Title managed by show view
    = semantic_form_for @content, url: claims_path do |f|

      // Errors
      = f.semantic_errors

      = f.inputs do
        = f.input :first,     placeholder: "First Name"
        = f.input :last,      placeholder: "Last Name"
        = f.input :email,     placeholder: "Email"
        = f.input :phone,     placeholder: "Phone"
        = f.input :mobile,    placeholder: "Mobile"
        = f.input :address,   placeholder: "Address", input_html: { class: 'autogrow', rows: 15  }
        = f.input :postcode,  placeholder: "Postcode"

      = f.inputs do
        = f.input :received,  as: :date_picker, input_html: { value: Date.today }
        = f.input :from,      as: :date_picker, input_html: { value: Date.today }
        = f.input :to,        as: :date_picker, input_html: { value: Date.today }
        = f.input :escalation, placeholder: "Escalation"

      = f.inputs class: "bools" do
        = f.input :insurance,   label: "Was insurance requirements and options pointed out to the client prior to commencement of the rental?"
        = f.input :signed,      label: "Has a signed condition report been provided on commencement of the rental?"
        = f.input :shown,       label: "Was the client showed round the vehicle pointing out previous damage prior to the handover of keys?"
        = f.input :inspected,   label: "Did the conditions make it difficult to inspect the vehicle prior to commencement of the rental (i.e. picked up in the rain, dark, underground car park, etc)?"
        = f.input :employee,    label: "Was there an employee present when handing over the vehicle?"
        = f.input :noted,       label: "Was damage noted on a condition report when handing the vehicle back?"
        = f.input :acknowledge, label: "Did our client acknowledge they caused the damage?"
        = f.input :report,      label: "Did the client sign the damage condition report?"
        = f.input :subsequent,  label: "Has subsequent damage been identified by the rental company after the vehicle has been checked in and handed over?"
        = f.input :card,        label: "Has the damage charge already been deducted from our client’s card?"
        = f.input :invoice,     label: "On the damage invoice, has all the damage been described correctly and matches the inbound condition report?"
        = f.input :images,      label: "On the invoice have appropriate images been included evidencing the following:"
        = f.input :repair,      label: "Is the cost of repair reasonable compared to the matrix provided?"
        = f.input :method,      label: "Is the repair method reasonable for the damage that has been identified?"
        = f.input :additional,  label: "Has the client been charged additional costs over and above the damage charges (i.e. damage handling fee, loss of usage)?"
        = f.input :vat,         label: "Has VAT been applied to the invoice or estimate?"

      = f.actions :submit

  - else
    = @content.try(:val).try(:html_safe)
