- ########################################################
- ########################################################
- # Pages
- # Allows us to crate and submit claim forms (letter builder)
- # Depending on input params, we'll be able to show different content
- ########################################################
- ########################################################

- # Inner pages only
- if params[:id] && params[:id].to_sym != :index
  = content_tag :h1, translate("page.titles.#{params[:id]}", default: params[:id].to_s.titleize).html_safe, class: :title # => Title
  = content_tag :div, translate("page.intros.#{params[:id]}", default: params[:id].to_s.titleize).html_safe, class: :intro # => Intro

- # Flash
- if flash.any?
  .flash
    - flash.each do |flash|
      = content_tag :div, flash.last, class: flash.first

- ########################################################
- ########################################################

- # This Allows us to list the FAQ's and news as appropriate
- case params[:id].try(:to_sym)
  - when :faq, :news

    - # Shouldn't have this but removes confusion with .container
    .panels

      - # List
      - if !@content.any?
        = content_tag :span, "No Items", class: "empty"
      - else
        - @content.order!(created_at: :desc) if params[:id].to_sym == :news
        - @content.each_with_index do |item,index|
          = content_tag :div, class: "panel" do

            - # FAQ / News
            - # FAQ links; News flexbox
            - if params[:id].to_sym == :faq
              = radio_button_tag "panel", index, ('checked' if index == 0)
              = label_tag "panel_#{index}", item.ref
              = content_tag :div, item.val.html_safe, class: "content"

            - elsif params[:id].to_sym == :news
              = link_to news_path(item), data: { published: item.created_at(:short) } do
                = image_tag (item.featured_image.attached? ? item.featured_image : "https://via.placeholder.com/350"), class: "featured", "nopin" => "true"
                = content_tag :h3, item.ref, class: "title"
                = content_tag :div, truncate_html(strip_links(item.value), length: 350, separator: ' ',  omission: '‚Ä¶').html_safe, class: "content"
                = content_tag :div, "Read...", class: "button"

  - when :claims

    - ########################################################
    - ########################################################
    - # Claims
    - # Allows us to crate and submit claim forms (letter builder)
    - # This is meant to provide users with the ability to identify the various elements of the app
    - ########################################################
    - ########################################################

    / Form
    / Title managed by show view
    = semantic_form_for @content, url: claims_path do |f|

      / Errors
      = f.semantic_errors

      = f.inputs "1Ô∏è‚É£ Client" do
        = f.input :first,     placeholder: "First Name"
        = f.input :last,      placeholder: "Last Name"
        = f.input :email,     placeholder: "Email"
        = f.input :phone,     placeholder: "Phone"
        = f.input :mobile,    placeholder: "Mobile"
        = f.input :address,   placeholder: "Address", input_html: { class: 'autogrow', rows: 15  }
        = f.input :postcode,  placeholder: "Postcode"

      = f.inputs "2Ô∏è‚É£ Claim" do
        = f.input :received,  as: :date_picker, input_html: { value: Date.today }
        = f.input :from,      as: :date_picker, input_html: { value: Date.today }
        = f.input :to,        as: :date_picker, input_html: { value: Date.today }
        = f.input :escalation, placeholder: "Escalation"

      = f.inputs "3Ô∏è‚É£ Information", class: "bools" do
        = f.input :insurance,   label: "Was insurance requirements and options pointed out to the client prior to commencement of the rental?"
        = f.input :signed,      label: "Has a signed condition report been provided on commencement of the rental?"
        = f.input :shown,       label: "Was the client showed round the vehicle pointing out previous damage prior to the handover of keys?"
        = f.input :inspected,   label: "Did the conditions make it difficult to inspect the vehicle prior to commencement of the rental (i.e. picked up in the rain, dark, underground car park, etc)?"
        = f.input :employee,    label: "Was there an employee present when handing over the vehicle?"
        = f.input :noted,       label: "Was damage noted on a condition report when handing the vehicle back?"
        = f.input :acknowledge, label: "Did our client acknowledge they caused the damage?"
        = f.input :report,      label: "Did the client sign the damage condition report?"
        = f.input :subsequent,  label: "Has subsequent damage been identified by the rental company after the vehicle has been checked in and handed over?"
        = f.input :card,        label: "Has the damage charge already been deducted from our client‚Äôs card?"
        = f.input :invoice,     label: "On the damage invoice, has all the damage been described correctly and matches the inbound condition report?"
        = f.input :images,      label: "On the invoice have appropriate images been included evidencing the following:"
        = f.input :repair,      label: "Is the cost of repair reasonable compared to the matrix provided?"
        = f.input :method,      label: "Is the repair method reasonable for the damage that has been identified?"
        = f.input :additional,  label: "Has the client been charged additional costs over and above the damage charges (i.e. damage handling fee, loss of usage)?"
        = f.input :vat,         label: "Has VAT been applied to the invoice or estimate?"

      = f.actions :submit

      / Privacy & Terms
      .links
        = link_to "Privacy", "/privacy", class: "privacy"
        &
        = link_to "Terms", "/terms", class: "terms"

  - when :contact

    / Map
    #contact_map

    / Form
    = semantic_form_for @content, url: contact_index_path do |f|
      = f.inputs "üí¨ Send A Message" do
        = f.input :first,   placeholder: "First Name",  input_html: { autocomplete: "false" }
        = f.input :last,    placeholder: "Last Name",   input_html: { autocomplete: "false" }
        = f.input :email,   placeholder: "Email",       input_html: { autocomplete: "false" }
        = f.input :address, placeholder: "Message",     input_html: { autocomplete: "false" }
      = f.actions :submit

  - else
    = @content.try(:val).try(:html_safe)

- ########################################################
- ########################################################

/ CTA
.cta
  = content_tag :strong, "WE‚ÄôLL REDUCE YOUR END OF CONTRACT DAMAGE BILL ‚Äì OR YOU WON‚ÄôT BE CHARGED A PENNY."
  = content_tag :span, "WE'RE OPEN 24/7 - CALL US FREE ON #{link_to Rails.application.credentials[Rails.env.to_sym][:company][:phone], Rails.application.credentials[Rails.env.to_sym][:company][:phone]}".html_safe
